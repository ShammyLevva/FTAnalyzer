<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Controls="clr-namespace:System.Windows.Controls">

	<Controls:ThicknessLeftConverter x:Key="ThicknessLeftConverter"/>
	
	<Style TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
		<Style.Triggers>
			<DataTrigger
				Binding="{Binding (VirtualizingStackPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, FallbackValue=True}"
				Value="True">
				<Setter Property="ItemsControl.ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel IsItemsHost="True"/>
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>
		</Style.Triggers>

		<Setter Property="RemarksTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock VerticalAlignment="Center" Margin="3,0,0,0" Text="{Binding}">
						<TextBlock.Style>
							<Style TargetType="TextBlock">
								<Style.Triggers>
									<DataTrigger Binding="{Binding}" Value="{x:Null}">
										<Setter Property="Visibility" Value="Collapsed"/>
									</DataTrigger>
									<DataTrigger Binding="{Binding}" Value="">
										<Setter Property="Visibility" Value="Collapsed"/>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</TextBlock.Style>
					</TextBlock>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ContentTemplateEdit">
			<Setter.Value>
				<DataTemplate>
					<Controls:EditTextBox Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0" Padding="1"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
		<Setter Property="VirtualizingStackPanel.VirtualizationMode"
			Value="{Binding (VirtualizingStackPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, FallbackValue=Standard}"/>
		<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False"/>
		<Setter Property="Panel.Background" Value="#00FFFFFF"/>
		<Setter Property="Control.HorizontalContentAlignment"
			Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Left}"/>
		<Setter Property="Control.VerticalContentAlignment"
			Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Center}"/>
		<Setter Property="Control.Padding" Value="1"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Margin" Value="0"/>
		<!-- Clear the default focus rectangle which would span the entire item in full width and with all visible children -->
		<Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>

		<!-- Pass on the MultiSelectTreeView' HoverHighlighting value to each item because we couldn't access it otherwise in the triggers -->
		<Setter Property="HoverHighlighting"
			Value="{Binding (Controls:MultiSelectTreeView.HoverHighlighting), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Mode=OneWay}"/>
		<Setter Property="ItemIndent"
			Value="{Binding (Controls:MultiSelectTreeView.ItemIndent), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Mode=OneWay}"/>
		<Setter Property="IsKeyboardMode"
			Value="{Binding (Controls:MultiSelectTreeView.IsKeyboardMode), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Mode=OneWay}"/>

		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
					<!-- region ControlTemplate content -->
					<StackPanel>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<!-- Set the second column width to * to have the items border expand to the right edge -->
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>

							<!-- region Expander button -->
							<ToggleButton
								IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeViewItem}}, Path=IsExpanded, FallbackValue=False}"
								ClickMode="Press" Name="Expander">
								<ToggleButton.Style>
									<Style TargetType="{x:Type ToggleButton}">
										<Style.Resources>
											<ResourceDictionary/>
										</Style.Resources>
										<Setter Property="UIElement.Focusable" Value="False"/>
										<Setter Property="FrameworkElement.Width" Value="12"/>
										<Setter Property="FrameworkElement.Height" Value="16"/>
										<Setter Property="Control.Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type ToggleButton}">
													<!-- Default expander arrow graphic -->
													<Border Padding="3,5" Background="#00FFFFFF" Width="12" Height="16">
														<Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
															<Path.Data>
																<PathGeometry Figures="M0,0 L0,6 L6,0 z"/>
															</Path.Data>
															<Path.RenderTransform>
																<RotateTransform Angle="135" CenterX="3" CenterY="3"/>
															</Path.RenderTransform>
														</Path>
													</Border>
													<ControlTemplate.Triggers>
														<!-- Make it blue when the mouse cursor is over it -->
														<Trigger Property="UIElement.IsMouseOver" Value="True">
															<Setter Property="Shape.Stroke" TargetName="ExpandPath">
																<Setter.Value>
																	<SolidColorBrush>#FF1BBBFA</SolidColorBrush>
																</Setter.Value>
															</Setter>
															<Setter Property="Shape.Fill" TargetName="ExpandPath">
																<Setter.Value>
																	<SolidColorBrush>#00FFFFFF</SolidColorBrush>
																</Setter.Value>
															</Setter>
														</Trigger>
														<!-- Rotate and make it dark when the node is expanded -->
														<Trigger Property="ToggleButton.IsChecked" Value="True">
															<Setter Property="UIElement.RenderTransform" TargetName="ExpandPath">
																<Setter.Value>
																	<RotateTransform Angle="180" CenterX="3" CenterY="3"/>
																</Setter.Value>
															</Setter>
															<Setter Property="Shape.Fill" TargetName="ExpandPath">
																<Setter.Value>
																	<SolidColorBrush>#FF595959</SolidColorBrush>
																</Setter.Value>
															</Setter>
															<Setter Property="Shape.Stroke" TargetName="ExpandPath">
																<Setter.Value>
																	<SolidColorBrush>#FF262626</SolidColorBrush>
																</Setter.Value>
															</Setter>
														</Trigger>
														<!-- Make it (darker) blue when expanded and the mouse cursor is over it -->
														<MultiTrigger>
															<MultiTrigger.Conditions>
																<Condition Property="UIElement.IsMouseOver" Value="True"/>
																<Condition Property="ToggleButton.IsChecked" Value="True"/>
															</MultiTrigger.Conditions>
															<MultiTrigger.Setters>
																<Setter Property="Shape.Stroke" TargetName="ExpandPath">
																	<Setter.Value>
																		<SolidColorBrush>#FF1BBBFA</SolidColorBrush>
																	</Setter.Value>
																</Setter>
																<Setter Property="Shape.Fill" TargetName="ExpandPath">
																	<Setter.Value>
																		<SolidColorBrush>#701BBBFA</SolidColorBrush>
																	</Setter.Value>
																</Setter>
															</MultiTrigger.Setters>
														</MultiTrigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</ToggleButton.Style>
							</ToggleButton>
							<!-- endregion Expander button -->

							<!-- region Element grid -->
							<StackPanel Grid.Column="1" Orientation="Horizontal">
									<Grid Name="ElementGrid">
									<Border Name="headerBorder"
										BorderThickness="{TemplateBinding Border.BorderThickness}"
										Padding="{TemplateBinding Control.Padding}"
										Margin="0,0,0,-1"
										BorderBrush="{TemplateBinding Border.BorderBrush}"
										Background="{TemplateBinding Panel.Background}"
										SnapsToDevicePixels="True"
										VerticalAlignment="Center">
										<ContentPresenter Name="PART_Header"
											FocusManager.IsFocusScope="True"
											Content="{TemplateBinding HeaderedContentControl.Header}"
											ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
											ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
											ContentSource="Header"
											HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
											VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
											SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
									</Border>
								</Grid>

								<ContentPresenter
									Content="{TemplateBinding Remarks}"
									ContentTemplate="{TemplateBinding RemarksTemplate}"
									SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
							</StackPanel>
							<!-- endregion Element grid -->
						</Grid>
						<Grid Name="ItemsHostGrid" Margin="{TemplateBinding ItemIndent, Converter={StaticResource ThicknessLeftConverter}}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>

							<Path Data="M0,0 L0,1" Stretch="Uniform" Name="RulerPath"
								Stroke="#60000000" StrokeDashArray="0.5 2.5"
								SnapsToDevicePixels="True" Margin="0,0,1,0"/>

							<ItemsPresenter Grid.Column="1" Name="ItemsHost"/>
						</Grid>
					</StackPanel>
					<!-- endregion ControlTemplate content -->

					<ControlTemplate.Triggers>

						<!-- Set the visibility of the item -->
						<Trigger Property="IsVisible" Value="False">
							<Setter Property="FrameworkElement.Visibility" Value="Collapsed"/>
						</Trigger>

						<!-- Set the border and background when the control is active and the item is selected -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Controls:MultiSelectTreeViewItem.IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Control.Background" Value="#cbe8f6"/>
							<Setter Property="Border.BorderBrush" Value="#26a0da"/>
						</MultiTrigger>

						<!-- Show the border when the item is focused -->
						<Trigger Property="Controls:MultiSelectTreeViewItem.IsFocused" Value="True">
							<Setter Property="Border.BorderBrush" Value="#3399ff"/>
						</Trigger>
						
						<!-- Slightly darker background when the item is selected and focused -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Controls:MultiSelectTreeViewItem.IsFocused" Value="True"/>
								<Condition Property="Controls:MultiSelectTreeViewItem.IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Control.Background" Value="#d1e8ff"/>
							<Setter Property="Border.BorderBrush" Value="#66a7e8"/>
						</MultiTrigger>

						<!-- Make all selected items grey when the entire Window is inactive -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=IsActive, FallbackValue=False}"
									Value="False"/>
								<Condition
									Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
									Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Control.Background" Value="#f7f7f7"/>
							<Setter Property="Border.BorderBrush" Value="#dedede"/>
						</MultiDataTrigger>
						
						<!-- Make all selected items grey when none of this TreeView's items is focused (i.e. the TreeView is not focused) -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=IsKeyboardFocusWithin, FallbackValue=False}"
									Value="False"/>
								<Condition
									Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=ContextMenu.IsOpen, FallbackValue=False}"
									Value="False"/>
								<Condition
									Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
									Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Control.Background" Value="#f7f7f7"/>
							<Setter Property="Border.BorderBrush" Value="#dedede"/>
						</MultiDataTrigger>

						<!-- Set the border and background when the mouse is located over the item and HoverHighlighting is active -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Controls:MultiSelectTreeViewItem.HoverHighlighting" Value="True"/>
								<Condition Property="Controls:MultiSelectTreeViewItem.IsMouseOver" Value="True" SourceName="ElementGrid"/>
							</MultiTrigger.Conditions>
							<Setter Property="Control.Background" Value="#d1e8ff"/>
							<Setter Property="Border.BorderBrush" Value="#66a7e8"/>
						</MultiTrigger>

						<!-- Collapse the child items host if the node is not expanded -->
						<Trigger Property="Controls:MultiSelectTreeViewItem.IsExpanded" Value="False">
							<Setter Property="UIElement.Visibility" TargetName="ItemsHostGrid" Value="Collapsed"/>
						</Trigger>
						
						<!-- Hide the expander button if there are no child nodes -->
						<Trigger Property="ItemsControl.HasItems" Value="False">
							<Setter Property="UIElement.Visibility" TargetName="Expander" Value="Hidden"/>
						</Trigger>
						
						<!-- Use grey text colour when the item is not enabled -->
						<Trigger Property="UIElement.IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
						
						<!-- Hide vertical rulers if disabled -->
						<DataTrigger
							Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=VerticalRulers}"
							Value="False">
							<Setter TargetName="RulerPath" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

						<!-- Use a different template and colours in edit mode -->
						<Trigger Property="Controls:MultiSelectTreeViewItem.IsEditing" Value="True">
							<Setter Property="HeaderTemplate"
								Value="{Binding ContentTemplateEdit, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="Control.Background" Value="#cbe8f6"/>
							<Setter Property="Border.BorderBrush" Value="#26a0da"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>