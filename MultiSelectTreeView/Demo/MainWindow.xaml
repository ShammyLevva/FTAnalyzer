<Window
	x:Class="Demo.MainWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Controls="clr-namespace:System.Windows.Controls;assembly=MultiSelectTreeView" 
	xmlns:demo="clr-namespace:Demo"
	xmlns:vm="clr-namespace:Demo.ViewModel"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	TextOptions.TextFormattingMode="Display"
	UseLayoutRounding="True"
	Title="MultiSelectTreeView demonstration app"
	Icon="/Demo;component/Images/MultiSelectTreeView.ico"
	Height="488" Width="500"
	Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
	ResizeMode="CanResizeWithGrip">
	
	<Window.Resources>
		<!--
		Here the normal editor template is defined
		-->
		<DataTemplate x:Key="EditTemplate" DataType="{x:Type vm:TreeItemViewModel}">
			<StackPanel Orientation="Horizontal">
				<Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
				<Controls:EditTextBox
					Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Padding="2,0,0,0"/>
			</StackPanel>
		</DataTemplate>

		<!--
		This is a specialised editor template for ColorItemViewModel items
		-->
		<ObjectDataProvider x:Key="colorsTypeOdp" ObjectType="{x:Type sys:Type}" MethodName="GetType">
			<ObjectDataProvider.MethodParameters>
				<sys:String>System.Windows.Media.Colors, PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</sys:String>
			</ObjectDataProvider.MethodParameters>
		</ObjectDataProvider>
		<ObjectDataProvider x:Key="colorPropertiesOdp" ObjectInstance="{StaticResource colorsTypeOdp}" MethodName="GetProperties"/>
		<DataTemplate x:Key="ColorEditTemplate" DataType="{x:Type vm:ColorItemViewModel}">
			<StackPanel Orientation="Horizontal">
				<TextBlock Text="Colour:" VerticalAlignment="Center"/>
				<ComboBox
					Width="170" Margin="6,0,0,0"
					ItemsSource="{Binding Source={StaticResource colorPropertiesOdp}}"
					SelectedValue="{Binding Color}"
					SelectedValuePath="Name">
					<ComboBox.ItemTemplate>
						<DataTemplate>
							<StackPanel Orientation="Horizontal">
								<Rectangle Margin="0,1,4,1" Width="15" Fill="{Binding Name}"/>
								<TextBlock Text="{Binding Name}"/>
							</StackPanel>
						</DataTemplate>
					</ComboBox.ItemTemplate>
				</ComboBox>
			</StackPanel>
		</DataTemplate>

		<!--
		The following selector selects a DataTemplate based on the type of an item. It is only
		required when using multiple different editor templates. If you do not use editing
		functionality of items at all or only need a single editor template, you can omit these
		template definitions and the selector and just define the template further down where it
		is noted.
		-->
		<demo:TypeTemplateSelector x:Key="EditorTemplateSelector">
			<demo:TypeTemplateSelector.TemplateDefinitions>
				<!--
				Following are all view model types that use a special editor template. Be sure to
				specify the most specialised type first, as base types will also be considered.
				-->
				<demo:TypeTemplateDefinition
					Type="{x:Type vm:ColorItemViewModel}" Template="{StaticResource ColorEditTemplate}"/>
				<demo:TypeTemplateDefinition
					Type="{x:Type vm:TreeItemViewModel}" Template="{StaticResource EditTemplate}"/>
			</demo:TypeTemplateSelector.TemplateDefinitions>
		</demo:TypeTemplateSelector>
		
		<BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
	</Window.Resources>
	
	<Grid Margin="12,8,12,12">
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*" x:Name="FirstColumn"/>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition Width="0" x:Name="LastColumn"/>
		</Grid.ColumnDefinitions>

		<DockPanel Margin="0,0,12,0">
			<TextBlock DockPanel.Dock="Top" Style="{StaticResource FirstCaption}">The TreeView control</TextBlock>
			<Controls:MultiSelectTreeView
				Name="TheTreeView"
				ItemsSource="{Binding Children}"
				PreviewSelectionChanged="TheTreeView_PreviewSelectionChanged">

				<Controls:MultiSelectTreeView.ContextMenu>
					<ContextMenu>
						<MenuItem Header="Expand" Click="ExpandMenuItem_Click"/>
						<Separator/>
						<MenuItem Header="Rename" Click="RenameMenuItem_Click"/>
						<MenuItem Header="Delete" Click="DeleteMenuItem_Click"/>
					</ContextMenu>
				</Controls:MultiSelectTreeView.ContextMenu>

				<Controls:MultiSelectTreeView.ItemContainerStyle>
					<Style TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
						<!--
						Here the TreeViewItem's properties are connected with the ViewModel class.
						Basically you would make all MultiSelectTreeViewItem properties accessible
						in the view model class that you possibly want to get or set in order to
						determine or manipulate the view from the view model class.
						-->
						<Setter Property="DisplayName" Value="{Binding DisplayName, Mode=TwoWay}"/>
						<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
						<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
						<Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=TwoWay}"/>
						<Setter Property="IsVisible" Value="{Binding IsVisible, Mode=TwoWay}"/>
						<Setter Property="IsEditable" Value="{Binding IsEditable, Mode=TwoWay}"/>
						<Setter Property="IsEditing" Value="{Binding IsEditing, Mode=TwoWay}"/>
						<Setter Property="Remarks" Value="{Binding Remarks, Mode=TwoWay}"/>
						<!--
						The ContentTemplateEdit property defines a DataTemplate that is applied
						instead of the normal viewing DataTemplate (definition below) when the item
						is in edit mode. If you do not need editing functionality or the default
						template is good for you, then you can omit this Setter.
						-->
						<Setter Property="ContentTemplateEdit">
							<Setter.Value>
								<DataTemplate>
									<!--
									NOTE:
									Instead of using a ContentControl which selects an editor template,
									you could directly define an editor template here which then applies
									to all item data types.
									EXAMPLE:
									<StackPanel Orientation="Horizontal">
										<Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
										<Controls:EditTextBox
											Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
											Padding="2,0,0,0"/>
									</StackPanel>
									-->
									<ContentControl
										Content="{Binding}"
										ContentTemplateSelector="{StaticResource EditorTemplateSelector}"/>
								</DataTemplate>
							</Setter.Value>
						</Setter>
						<!--
						The RemarksTemplate property defines a DataTemplate that is applied instead
						of the normal viewing DataTemplate. If you do not need remarks
						functionality or the default template is good for you, then you can omit
						this Setter.
						-->
						<Setter Property="RemarksTemplate">
							<Setter.Value>
								<DataTemplate>
									<TextBlock VerticalAlignment="Center" Margin="3,0,0,0" Foreground="#a0ff0000" FontStyle="Italic" Text="{Binding}">
										<TextBlock.Style>
											<Style TargetType="TextBlock">
												<Style.Triggers>
													<DataTrigger Binding="{Binding}" Value="{x:Null}">
														<Setter Property="Visibility" Value="Collapsed"/>
													</DataTrigger>
													<DataTrigger Binding="{Binding}" Value="">
														<Setter Property="Visibility" Value="Collapsed"/>
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</TextBlock.Style>
									</TextBlock>
								</DataTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</Controls:MultiSelectTreeView.ItemContainerStyle>

				<Controls:MultiSelectTreeView.Resources>
					<!--
					Here the general item appearance is defined, for the ViewModel.TreeItemViewModel type
					-->
					<HierarchicalDataTemplate DataType="{x:Type vm:TreeItemViewModel}" ItemsSource="{Binding Children}">
						<StackPanel Orientation="Horizontal">
							<Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16" SnapsToDevicePixels="True"/>
							<TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" Padding="4,0,2,0"/>
						</StackPanel>
					</HierarchicalDataTemplate>

					<!--
					This is another item appearance for the ViewModel.ColorItemViewModel type
					-->
					<HierarchicalDataTemplate DataType="{x:Type vm:ColorItemViewModel}" ItemsSource="{Binding Children}">
						<StackPanel Orientation="Horizontal">
							<TextBlock Text="Colour:" Margin="1,0,0,0"/>
							<TextBlock
								Text="{Binding DisplayName}"
								Background="{Binding BackgroundBrush}"
								Foreground="{Binding ForegroundBrush}"
								Padding="3,0"
								Margin="6,0,0,0"/>
						</StackPanel>
					</HierarchicalDataTemplate>
				</Controls:MultiSelectTreeView.Resources>
			</Controls:MultiSelectTreeView>
		</DockPanel>

		<!--
		The remaining code defines the right column of the window that contains controls to
		demonstrate some of the MultiSelectTreeView properties and operations.
		-->
		<StackPanel Grid.Column="1">
			<TextBlock Style="{StaticResource FirstCaption}">TreeView properties</TextBlock>
			<CheckBox
				Content="&#160;Allow editing items (F2 key)"
				HorizontalAlignment="Left"
				IsChecked="{Binding AllowEditItems, ElementName=TheTreeView}"/>
			<CheckBox
				Content="&#160;Hover items effect"
				HorizontalAlignment="Left"
				IsChecked="{Binding HoverHighlighting, ElementName=TheTreeView}"/>
			<CheckBox
				Content="&#160;Show ruler lines"
				HorizontalAlignment="Left"
				IsChecked="{Binding VerticalRulers, ElementName=TheTreeView}"/>
			<StackPanel Orientation="Horizontal">
				<TextBlock VerticalAlignment="Center">Item indent</TextBlock>
				<Slider
					Margin="8,0,0,0"
					Width="100"
					Value="{Binding ItemIndent, ElementName=TheTreeView}"
					Minimum="0" Maximum="32" Interval="1" SmallChange="1" LargeChange="8"
					TickPlacement="BottomRight" TickFrequency="8"
					AutoToolTipPlacement="TopLeft"/>
			</StackPanel>
			<TextBlock Margin="0,4,0,0" FontStyle="Italic" Opacity="0.5">
				These settings only apply to<LineBreak/>
				the left TreeView control.
			</TextBlock>
			<CheckBox
				Name="ShowSecondCheck"
				Margin="0,8,0,0"
				Content="&#160;Show second TreeView"
				HorizontalAlignment="Left" Checked="ShowSecondCheck_Checked" Unchecked="ShowSecondCheck_Checked"/>

			<TextBlock Style="{StaticResource Caption}">Selection</TextBlock>
			<StackPanel Orientation="Horizontal">
				<Button Margin="0,0,0,0" Padding="2" Name="SelectNoneButton" Click="SelectNoneButton_Click" ToolTip="Select none">
					<Image Source="/Demo;component/Images/select_none_11.png" Width="11" Height="11"/>
				</Button>
				<Button Margin="6,0,0,0" Padding="2" Name="SelectSomeButton" Click="SelectSomeButton_Click" ToolTip="Select some">
					<Image Source="/Demo;component/Images/select_some_11.png" Width="11" Height="11"/>
				</Button>
				<Button Margin="6,0,0,0" Padding="2" Name="SelectAllButton" Click="SelectAllButton_Click" ToolTip="Select all">
					<Image Source="/Demo;component/Images/select_all_11.png" Width="11" Height="11"/>
				</Button>
				<Button Margin="6,0,0,0" Padding="2" Name="ToggleSelectButton" Click="ToggleSelectButton_Click" ToolTip="Toggle selections">
					<Image Source="/Demo;component/Images/select_toggle_11.png" Width="11" Height="11"/>
				</Button>
				<CheckBox
					Name="LockSelectionCheck"
					Content="Lock"
					Margin="12,0,0,0"
					VerticalAlignment="Center"
					ToolTip="Prevent any change to the selection by the user"/>
			</StackPanel>
			<TextBlock Margin="0,4,0,0">
				<Run Text="{Binding SelectedItems.Count, ElementName=TheTreeView, Mode=OneWay}"/>
				<Run>elements selected</Run>
			</TextBlock>

			<TextBlock Style="{StaticResource Caption}">Item operations</TextBlock>
			<Button HorizontalAlignment="Left" Padding="4,1" Click="AddChildButton_Click"
				Content="Add child item" ToolTip="Adds a child node to each selected node."/>
			<Button HorizontalAlignment="Left" Padding="4,1" Margin="0,4,0,0" Click="ClearChildrenButton_Click"
				Content="Clear child items" ToolTip="Removes all child nodes from the selected nodes."/>
			<Button HorizontalAlignment="Left" Padding="4,1" Margin="0,4,0,0" Click="ExpandNodesButton_Click"
				Content="Expand items" ToolTip="Expands the selected items."/>
			<Button HorizontalAlignment="Left" Padding="4,1" Margin="0,4,0,0" Click="HideNodesButton_Click"
				Content="Hide selected items" ToolTip="Hides the selected nodes."/>
			<Button HorizontalAlignment="Left" Padding="4,1" Margin="0,4,0,0" Click="ShowNodesButton_Click"
				Content="Show all items" ToolTip="Shows all nodes."/>
		</StackPanel>

		<DockPanel
			Name="SecondTreePanel"
			Grid.Column="2"
			Margin="12,0,0,0"
			Visibility="{Binding IsChecked, ElementName=ShowSecondCheck, Converter={StaticResource BoolToVisibility}}">
			<TextBlock DockPanel.Dock="Top" Style="{StaticResource FirstCaption}">Second TreeView control</TextBlock>
			<TextBlock DockPanel.Dock="Bottom" Margin="0,4,0,0" TextWrapping="Wrap" FontStyle="Italic" Opacity="0.5">
				This TreeView is bound to the same ViewModel as the left TreeView so it has the same content and state.
				It uses different item templates though.
			</TextBlock>
			<Controls:MultiSelectTreeView
				Name="TheTreeView2"
				ItemsSource="{Binding Children}">

				<Controls:MultiSelectTreeView.ItemContainerStyle>
					<Style TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
						<!--
						Here the TreeViewItem's properties are connected with the ViewModel class.
						Basically you would make all MultiSelectTreeViewItem properties accessible
						in the view model class that you possibly want to get or set in order to
						determine or manipulate the view from the view model class.
						-->
						<Setter Property="DisplayName" Value="{Binding DisplayName, Mode=TwoWay}"/>
						<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
						<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
						<Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=TwoWay}"/>
						<Setter Property="IsVisible" Value="{Binding IsVisible, Mode=TwoWay}"/>
						<Setter Property="IsEditable" Value="{Binding IsEditable, Mode=TwoWay}"/>
						<!-- Don't bind IsEditing because this would lead to two TreeViews editing the item... -->
					</Style>
				</Controls:MultiSelectTreeView.ItemContainerStyle>

				<Controls:MultiSelectTreeView.Resources>
					<!--
					Here the general item appearance is defined, for the ViewModel.TreeItemViewModel type
					-->
					<HierarchicalDataTemplate DataType="{x:Type vm:TreeItemViewModel}" ItemsSource="{Binding Children}">
						<StackPanel Orientation="Horizontal">
							<Border Background="Orange" CornerRadius="3" Width="16" Height="16" SnapsToDevicePixels="True"/>
							<TextBlock Text="{Binding DisplayName}" Padding="4,0,2,0"/>
						</StackPanel>
					</HierarchicalDataTemplate>

					<!--
					This is another item appearance for the ViewModel.ColorItemViewModel type
					-->
					<HierarchicalDataTemplate DataType="{x:Type vm:ColorItemViewModel}" ItemsSource="{Binding Children}">
						<TextBlock
							Text="{Binding DisplayName}"
							Background="{Binding BackgroundBrush}"
							Foreground="{Binding ForegroundBrush}"
							Padding="4,0,2,0"/>
					</HierarchicalDataTemplate>
				</Controls:MultiSelectTreeView.Resources>
			</Controls:MultiSelectTreeView>
		</DockPanel>
	</Grid>
</Window>
